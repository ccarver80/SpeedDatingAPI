#!/usr/bin/env node

/**
 * Module dependencies.
 */

var { app } = require("../app");
const cors = require("cors");
var debug = require("debug")("api:server");
var http = require("http");
let socketapi = require("../socketapi");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

app.use(cors());
var server = http.createServer(app);

/*
 * SOCKET IO
 *
 */
const { PrismaClient, Prisma } = require("@prisma/client");
const prisma = new PrismaClient();
var io = require("socket.io")(server, {
  cors: {
    origin: ["http://localhost:3000"],
  },
});

io.on("connection", (socket) => {
  // Join Room
  socket.on("join-room", async (room, user) => {
    const roomInfo = await prisma.room.findFirst({
      where: {
        rec_id: parseInt(room),
      },
      include: {
        users: true,
      },
    });

    const userInfo = await prisma.user.findFirst({
      where: {
        rec_id: parseInt(user),
      },
    });

    const spots = roomInfo.spots_availble;
    const userList = roomInfo.users;
    if (userList.length < spots) {
      try {
        socket.join(room);
        io.to(room).emit("new-user", user);

        // Add socket ID to user
        const updateUser = await prisma.user.update({
          where: {
            rec_id: parseInt(user),
          },
          data: {
            socketId: socket.id,
          },
        });

        // Update Room
        const roomUpdate = await prisma.room.update({
          where: {
            rec_id: parseInt(room),
          },
          include: {
            users: true,
          },
          data: {
            users: {
              connect: {
                rec_id: parseInt(user),
              },
            },
            spots_availble: spots - 1,
          },
        });
      } catch (err) {
        console.log(err);
      }
    }
  });

  // Message Sent
  socket.on("send-message", (message, room, user) => {
    io.to(room).emit("receive-message", { message: message, user: socket.id });
  });

  // Disconnect
  socket.on("disconnect", async () => {
    console.log("USER DISCONNECTED!");
    console.log(socket.id);

    const user = await prisma.user.findFirst({
      where: {
        socketId: socket.id,
      },
    });

    if (user != null) {
      const roomInfo = await prisma.room.findFirst({
        where: {
          rec_id: parseInt(user.roomRec_id),
        },
      });

      const roomUpdate = await prisma.room.update({
        where: {
          rec_id: parseInt(user.roomRec_id),
        },
        data: {
          spots_availble: roomInfo.spots_availble + 1,
        },
        data: {
          users: {
            disconnect: {
              rec_id: parseInt(user.rec_id),
            },
          },
        },
        include: {
          users: true,
        },
      });

      const deleteUser = await prisma.user.update({
        where: {
          socketId: socket.id,
        },

        data: {
          roomRec_id: null,
          socketId: null,
        },
      });
      console.log(deleteUser);
      // Deletes Room if no one left in room
      if (roomUpdate.users.length < 1) {
        console.log("Room Deleted");
        const roomDelete = await prisma.room.delete({
          where: {
            rec_id: roomUpdate.rec_id,
          },
        });
      }
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
console.log("Listening on port " + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening " + bind);
}
